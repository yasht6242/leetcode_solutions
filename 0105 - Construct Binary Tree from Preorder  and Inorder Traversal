/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // Helper function to build the tree recursively.
    TreeNode* build(int pre_start, int pre_end, int in_start, int in_end, vector<int>       preorder, vector<int>& inorder, unordered_map<int, int>& inorder_index) {
    if (pre_start > pre_end) {
        return nullptr; // Empty tree/subtree
    }

    // The root value is the first element of the preorder traversal.
    int root_val = preorder[pre_start];
    TreeNode* root = new TreeNode(root_val);

    // Find the index of the root value in the inorder traversal.
    int root_index_inorder = inorder_index[root_val];

    // Calculate the number of nodes in the left subtree.
    int num_left_nodes = root_index_inorder - in_start;

    // Recursively build the left and right subtrees.
    root->left = build(pre_start + 1, pre_start + num_left_nodes, in_start, root_index_inorder - 1, preorder, inorder, inorder_index);
    root->right = build(pre_start + num_left_nodes + 1, pre_end, root_index_inorder + 1, in_end, preorder, inorder, inorder_index);

    return root;
}
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
       
    unordered_map<int, int> inorder_index;
    for (int i = 0; i < inorder.size(); i++) {
        inorder_index[inorder[i]] = i;
    }

    // Start building the tree with the entire range of indices.
    return build(0, preorder.size() - 1, 0, inorder.size() - 1, preorder, inorder, inorder_index);

    }
};
